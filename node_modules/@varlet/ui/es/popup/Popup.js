function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { defineComponent, watch } from 'vue';
import { props } from './props';
import { useLock } from '../context/lock';
import { useZIndex } from '../context/zIndex';
import { addRouteListener, useTeleport } from '../utils/components';
import { normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderSlot as _renderSlot, mergeProps as _mergeProps, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode, vShow as _vShow, createElementVNode as _createElementVNode, withDirectives as _withDirectives, Teleport as _Teleport, createBlock as _createBlock } from "vue";
export function render(_ctx, _cache) {
  return _openBlock(), _createBlock(_Teleport, {
    to: _ctx.teleport,
    disabled: !_ctx.teleport || _ctx.disabled
  }, [_createVNode(_Transition, {
    name: "var-fade",
    onAfterEnter: _ctx.onOpened,
    onAfterLeave: _ctx.onClosed
  }, {
    default: _withCtx(() => [_withDirectives(_createElementVNode("div", {
      class: "var--box var-popup",
      style: _normalizeStyle({
        zIndex: _ctx.zIndex - 2
      })
    }, [_ctx.overlay ? (_openBlock(), _createElementBlock("div", {
      key: 0,
      class: _normalizeClass(["var-popup__overlay", [_ctx.overlayClass]]),
      style: _normalizeStyle(_extends({
        zIndex: _ctx.zIndex - 1
      }, _ctx.overlayStyle)),
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.hidePopup && _ctx.hidePopup(...args))
    }, null, 6
    /* CLASS, STYLE */
    )) : _createCommentVNode("v-if", true), _createVNode(_Transition, {
      name: _ctx.transition ? _ctx.transition : "var-pop-" + _ctx.position
    }, {
      default: _withCtx(() => [_ctx.show ? (_openBlock(), _createElementBlock("div", _mergeProps({
        key: 0,
        class: ["var-popup__content var-elevation--3", ["var-popup--" + _ctx.position]],
        style: {
          zIndex: _ctx.zIndex
        }
      }, _ctx.$attrs), [_renderSlot(_ctx.$slots, "default")], 16
      /* FULL_PROPS */
      )) : _createCommentVNode("v-if", true)]),
      _: 3
      /* FORWARDED */

    }, 8
    /* PROPS */
    , ["name"])], 4
    /* STYLE */
    ), [[_vShow, _ctx.show]])]),
    _: 3
    /* FORWARDED */

  }, 8
  /* PROPS */
  , ["onAfterEnter", "onAfterLeave"])], 8
  /* PROPS */
  , ["to", "disabled"]);
}
export default defineComponent({
  render,
  name: 'VarPopup',
  inheritAttrs: false,
  props,

  setup(props) {
    var {
      zIndex
    } = useZIndex(() => props.show, 3);
    var {
      disabled
    } = useTeleport();

    var hidePopup = () => {
      var _props$onUpdateShow;

      var {
        closeOnClickOverlay,
        onClickOverlay
      } = props;
      onClickOverlay == null ? void 0 : onClickOverlay();

      if (!closeOnClickOverlay) {
        return;
      }

      (_props$onUpdateShow = props['onUpdate:show']) == null ? void 0 : _props$onUpdateShow.call(props, false);
    };

    useLock(props, 'show', 'lockScroll');
    watch(() => props.show, newValue => {
      var {
        onOpen,
        onClose
      } = props;
      newValue ? onOpen == null ? void 0 : onOpen() : onClose == null ? void 0 : onClose();
    }); // internal for Dialog

    addRouteListener(() => props.onRouteChange == null ? void 0 : props.onRouteChange());
    return {
      zIndex,
      disabled,
      hidePopup
    };
  }

});