import VarFormDetails from '../form-details';
import VarIcon from '../icon';
import { defineComponent, getCurrentInstance, ref, computed, nextTick } from 'vue';
import { props } from './props';
import { isEmpty, isNumber, toNumber } from '../utils/shared';
import { useValidation } from '../utils/components';
import { useForm } from '../form/provide';
import { renderSlot as _renderSlot, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveDynamicComponent as _resolveDynamicComponent, normalizeStyle as _normalizeStyle, createBlock as _createBlock, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  key: 0,
  class: "var-input__autocomplete"
};
var _hoisted_2 = ["for"];
export function render(_ctx, _cache) {
  var _component_var_icon = _resolveComponent("var-icon");

  var _component_var_form_details = _resolveComponent("var-form-details");

  return _openBlock(), _createElementBlock("div", {
    class: _normalizeClass(["var-input var--box", [_ctx.disabled ? 'var-input--disabled' : null]]),
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
  }, [_createElementVNode("div", {
    class: _normalizeClass(["var-input__controller", [_ctx.isFocus ? 'var-input--focus' : null, _ctx.errorMessage ? 'var-input--error' : null, _ctx.formDisabled || _ctx.disabled ? 'var-input--disabled' : null]]),
    style: _normalizeStyle({
      color: !_ctx.errorMessage ? _ctx.isFocus ? _ctx.focusColor : _ctx.blurColor : undefined
    })
  }, [_createElementVNode("div", {
    class: _normalizeClass(["var-input__icon", [!_ctx.hint ? 'var-input--non-hint' : null]])
  }, [_renderSlot(_ctx.$slots, "prepend-icon")], 2
  /* CLASS */
  ), _createElementVNode("div", {
    class: _normalizeClass(["var-input__wrap", [!_ctx.hint ? 'var-input--non-hint' : null]])
  }, [_ctx.type === 'password' ? (_openBlock(), _createElementBlock("input", _hoisted_1)) : _createCommentVNode("v-if", true), (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.textarea ? 'textarea' : 'input'), {
    class: _normalizeClass(["var-input__input", [_ctx.formDisabled || _ctx.disabled ? 'var-input--disabled' : null, _ctx.textarea ? 'var-input--textarea' : null, _ctx.errorMessage ? 'var-input--caret-error' : null]]),
    ref: "el",
    autocomplete: "new-password",
    id: _ctx.id,
    disabled: _ctx.formDisabled || _ctx.disabled || _ctx.formReadonly || _ctx.readonly,
    type: _ctx.type,
    value: _ctx.modelValue,
    maxlength: _ctx.maxlength,
    rows: _ctx.rows,
    style: _normalizeStyle({
      color: _ctx.textColor,
      caretColor: !_ctx.errorMessage ? _ctx.focusColor : null,
      resize: _ctx.resize ? 'vertical' : 'none'
    }),
    onFocus: _ctx.handleFocus,
    onBlur: _ctx.handleBlur,
    onInput: _ctx.handleInput,
    onChange: _ctx.handleChange
  }, null, 8
  /* PROPS */
  , ["id", "disabled", "type", "value", "maxlength", "rows", "class", "style", "onFocus", "onBlur", "onInput", "onChange"])), _createElementVNode("label", {
    class: _normalizeClass([_ctx.textarea ? 'var-input__textarea-placeholder' : 'var-input__placeholder', _ctx.computePlaceholderState(), !_ctx.hint ? 'var-input--placeholder-non-hint' : null]),
    for: _ctx.id
  }, _toDisplayString(_ctx.placeholder), 11
  /* TEXT, CLASS, PROPS */
  , _hoisted_2)], 2
  /* CLASS */
  ), _createElementVNode("div", {
    class: _normalizeClass(["var-input__icon", [!_ctx.hint ? 'var-input--non-hint' : null]])
  }, [_renderSlot(_ctx.$slots, "append-icon", {}, () => [_ctx.clearable && !_ctx.isEmpty(_ctx.modelValue) ? (_openBlock(), _createBlock(_component_var_icon, {
    key: 0,
    class: "var-input__clear-icon",
    "var-input-cover": "",
    name: "close-circle",
    size: "14px",
    onClick: _ctx.handleClear
  }, null, 8
  /* PROPS */
  , ["onClick"])) : _createCommentVNode("v-if", true)])], 2
  /* CLASS */
  )], 6
  /* CLASS, STYLE */
  ), _ctx.line ? (_openBlock(), _createElementBlock("div", {
    key: 0,
    class: _normalizeClass(["var-input__line", [_ctx.formDisabled || _ctx.disabled ? 'var-input--line-disabled' : null, _ctx.errorMessage ? 'var-input--line-error' : null]]),
    style: _normalizeStyle({
      background: !_ctx.errorMessage ? _ctx.blurColor : undefined
    })
  }, [_createElementVNode("div", {
    class: _normalizeClass(["var-input__dot", [_ctx.isFocus ? 'var-input--spread' : null, _ctx.formDisabled || _ctx.disabled ? 'var-input--line-disabled' : null, _ctx.errorMessage ? 'var-input--line-error' : null]]),
    style: _normalizeStyle({
      background: !_ctx.errorMessage ? _ctx.focusColor : undefined
    })
  }, null, 6
  /* CLASS, STYLE */
  )], 6
  /* CLASS, STYLE */
  )) : _createCommentVNode("v-if", true), _createVNode(_component_var_form_details, {
    "error-message": _ctx.errorMessage,
    "maxlength-text": _ctx.maxlengthText
  }, null, 8
  /* PROPS */
  , ["error-message", "maxlength-text"])], 2
  /* CLASS */
  );
}
export default defineComponent({
  render,
  name: 'VarInput',
  components: {
    VarIcon,
    VarFormDetails
  },
  props,

  setup(props) {
    var id = ref("var-input-" + getCurrentInstance().uid);
    var el = ref(null);
    var isFocus = ref(false);
    var isNumberValue = computed(() => isNumber(props.modelValue));
    var type = computed(() => {
      var {
        type
      } = props;

      if (type === 'password') {
        return type;
      }

      if (isNumberValue.value) {
        return 'number';
      }

      return 'text';
    });
    var maxlengthText = computed(() => {
      var {
        maxlength,
        modelValue
      } = props;

      if (!maxlength) {
        return '';
      }

      if (isEmpty(modelValue)) {
        return "0 / " + maxlength;
      }

      return String(modelValue).length + "/" + maxlength;
    });
    var {
      bindForm,
      form
    } = useForm();
    var {
      errorMessage,
      validateWithTrigger: vt,
      validate: v,
      // expose
      resetValidation
    } = useValidation();

    var validateWithTrigger = trigger => {
      nextTick(() => {
        var {
          validateTrigger,
          rules,
          modelValue
        } = props;
        vt(validateTrigger, trigger, rules, modelValue);
      });
    };

    var computePlaceholderState = () => {
      var {
        hint,
        modelValue
      } = props;

      if (!hint && !isEmpty(modelValue)) {
        return 'var-input--placeholder-hidden';
      }

      if (hint && (!isEmpty(modelValue) || isFocus.value)) {
        return 'var-input--placeholder-hint';
      }
    };

    var normalizeValue = value => isNumberValue.value ? toNumber(value) : value;

    var handleFocus = e => {
      isFocus.value = true;
      props.onFocus == null ? void 0 : props.onFocus(e);
      validateWithTrigger('onFocus');
    };

    var handleBlur = e => {
      isFocus.value = false;
      props.onBlur == null ? void 0 : props.onBlur(e);
      validateWithTrigger('onBlur');
    };

    var handleInput = e => {
      var _props$onUpdateModel;

      var {
        value
      } = e.target;
      var normalizedValue = normalizeValue(value);
      (_props$onUpdateModel = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel.call(props, normalizedValue);
      props.onInput == null ? void 0 : props.onInput(normalizedValue, e);
      validateWithTrigger('onInput');
    };

    var handleChange = e => {
      var {
        value
      } = e.target;
      props.onChange == null ? void 0 : props.onChange(normalizeValue(value), e);
      validateWithTrigger('onChange');
    };

    var handleClear = () => {
      var _props$onUpdateModel2;

      var {
        disabled,
        readonly,
        clearable,
        onClear
      } = props;

      if (form != null && form.disabled.value || form != null && form.readonly.value || disabled || readonly || !clearable) {
        return;
      }

      var value = isNumberValue.value ? 0 : '';
      (_props$onUpdateModel2 = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel2.call(props, value);
      onClear == null ? void 0 : onClear(value);
      validateWithTrigger('onClear');
    };

    var handleClick = e => {
      var {
        disabled,
        onClick
      } = props;

      if (form != null && form.disabled.value || disabled) {
        return;
      }

      onClick == null ? void 0 : onClick(e);
      validateWithTrigger('onClick');
    }; // expose


    var reset = () => {
      var _props$onUpdateModel3;

      (_props$onUpdateModel3 = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel3.call(props, isNumberValue.value ? 0 : '');
      resetValidation();
    }; // expose


    var validate = () => v(props.rules, props.modelValue); // expose


    var focus = () => {
      ;
      el.value.focus();
    }; // expose


    var blur = () => {
      ;
      el.value.blur();
    };

    var inputProvider = {
      reset,
      validate,
      resetValidation
    };
    bindForm == null ? void 0 : bindForm(inputProvider);
    return {
      el,
      type,
      id,
      isFocus,
      errorMessage,
      maxlengthText,
      formDisabled: form == null ? void 0 : form.disabled,
      formReadonly: form == null ? void 0 : form.readonly,
      isEmpty,
      computePlaceholderState,
      handleFocus,
      handleBlur,
      handleInput,
      handleChange,
      handleClear,
      handleClick,
      validate,
      resetValidation,
      reset,
      focus,
      blur
    };
  }

});